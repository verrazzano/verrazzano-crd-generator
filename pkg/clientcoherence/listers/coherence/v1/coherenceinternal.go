// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/oracle/verrazzano-crd-generator/pkg/apis/coherence/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CoherenceInternalLister helps list CoherenceInternals.
type CoherenceInternalLister interface {
	// List lists all CoherenceInternals in the indexer.
	List(selector labels.Selector) (ret []*v1.CoherenceInternal, err error)
	// CoherenceInternals returns an object that can list and get CoherenceInternals.
	CoherenceInternals(namespace string) CoherenceInternalNamespaceLister
	CoherenceInternalListerExpansion
}

// coherenceInternalLister implements the CoherenceInternalLister interface.
type coherenceInternalLister struct {
	indexer cache.Indexer
}

// NewCoherenceInternalLister returns a new CoherenceInternalLister.
func NewCoherenceInternalLister(indexer cache.Indexer) CoherenceInternalLister {
	return &coherenceInternalLister{indexer: indexer}
}

// List lists all CoherenceInternals in the indexer.
func (s *coherenceInternalLister) List(selector labels.Selector) (ret []*v1.CoherenceInternal, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CoherenceInternal))
	})
	return ret, err
}

// CoherenceInternals returns an object that can list and get CoherenceInternals.
func (s *coherenceInternalLister) CoherenceInternals(namespace string) CoherenceInternalNamespaceLister {
	return coherenceInternalNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CoherenceInternalNamespaceLister helps list and get CoherenceInternals.
type CoherenceInternalNamespaceLister interface {
	// List lists all CoherenceInternals in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.CoherenceInternal, err error)
	// Get retrieves the CoherenceInternal from the indexer for a given namespace and name.
	Get(name string) (*v1.CoherenceInternal, error)
	CoherenceInternalNamespaceListerExpansion
}

// coherenceInternalNamespaceLister implements the CoherenceInternalNamespaceLister
// interface.
type coherenceInternalNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CoherenceInternals in the indexer for a given namespace.
func (s coherenceInternalNamespaceLister) List(selector labels.Selector) (ret []*v1.CoherenceInternal, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CoherenceInternal))
	})
	return ret, err
}

// Get retrieves the CoherenceInternal from the indexer for a given namespace and name.
func (s coherenceInternalNamespaceLister) Get(name string) (*v1.CoherenceInternal, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("coherenceinternal"), name)
	}
	return obj.(*v1.CoherenceInternal), nil
}
