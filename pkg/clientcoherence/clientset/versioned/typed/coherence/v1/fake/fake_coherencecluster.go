// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	coherencev1 "github.com/oracle/verrazzano-crd-generator/pkg/apis/coherence/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCoherenceClusters implements CoherenceClusterInterface
type FakeCoherenceClusters struct {
	Fake *FakeCoherenceV1
	ns   string
}

var coherenceclustersResource = schema.GroupVersionResource{Group: "coherence.oracle.com", Version: "v1", Resource: "coherenceclusters"}

var coherenceclustersKind = schema.GroupVersionKind{Group: "coherence.oracle.com", Version: "v1", Kind: "CoherenceCluster"}

// Get takes name of the coherenceCluster, and returns the corresponding coherenceCluster object, and an error if there is any.
func (c *FakeCoherenceClusters) Get(name string, options v1.GetOptions) (result *coherencev1.CoherenceCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(coherenceclustersResource, c.ns, name), &coherencev1.CoherenceCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*coherencev1.CoherenceCluster), err
}

// List takes label and field selectors, and returns the list of CoherenceClusters that match those selectors.
func (c *FakeCoherenceClusters) List(opts v1.ListOptions) (result *coherencev1.CoherenceClusterList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(coherenceclustersResource, coherenceclustersKind, c.ns, opts), &coherencev1.CoherenceClusterList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &coherencev1.CoherenceClusterList{ListMeta: obj.(*coherencev1.CoherenceClusterList).ListMeta}
	for _, item := range obj.(*coherencev1.CoherenceClusterList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested coherenceClusters.
func (c *FakeCoherenceClusters) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(coherenceclustersResource, c.ns, opts))

}

// Create takes the representation of a coherenceCluster and creates it.  Returns the server's representation of the coherenceCluster, and an error, if there is any.
func (c *FakeCoherenceClusters) Create(coherenceCluster *coherencev1.CoherenceCluster) (result *coherencev1.CoherenceCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(coherenceclustersResource, c.ns, coherenceCluster), &coherencev1.CoherenceCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*coherencev1.CoherenceCluster), err
}

// Update takes the representation of a coherenceCluster and updates it. Returns the server's representation of the coherenceCluster, and an error, if there is any.
func (c *FakeCoherenceClusters) Update(coherenceCluster *coherencev1.CoherenceCluster) (result *coherencev1.CoherenceCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(coherenceclustersResource, c.ns, coherenceCluster), &coherencev1.CoherenceCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*coherencev1.CoherenceCluster), err
}

// Delete takes name of the coherenceCluster and deletes it. Returns an error if one occurs.
func (c *FakeCoherenceClusters) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(coherenceclustersResource, c.ns, name), &coherencev1.CoherenceCluster{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCoherenceClusters) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(coherenceclustersResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &coherencev1.CoherenceClusterList{})
	return err
}

// Patch applies the patch and returns the patched coherenceCluster.
func (c *FakeCoherenceClusters) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *coherencev1.CoherenceCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(coherenceclustersResource, c.ns, name, pt, data, subresources...), &coherencev1.CoherenceCluster{})

	if obj == nil {
		return nil, err
	}
	return obj.(*coherencev1.CoherenceCluster), err
}
