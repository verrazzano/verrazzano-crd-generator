// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/oracle/verrazzano-crd-generator/pkg/apis/coherence/v1"
	scheme "github.com/oracle/verrazzano-crd-generator/pkg/clientcoherence/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CoherenceInternalsGetter has a method to return a CoherenceInternalInterface.
// A group's client should implement this interface.
type CoherenceInternalsGetter interface {
	CoherenceInternals(namespace string) CoherenceInternalInterface
}

// CoherenceInternalInterface has methods to work with CoherenceInternal resources.
type CoherenceInternalInterface interface {
	Create(*v1.CoherenceInternal) (*v1.CoherenceInternal, error)
	Update(*v1.CoherenceInternal) (*v1.CoherenceInternal, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.CoherenceInternal, error)
	List(opts metav1.ListOptions) (*v1.CoherenceInternalList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.CoherenceInternal, err error)
	CoherenceInternalExpansion
}

// coherenceInternals implements CoherenceInternalInterface
type coherenceInternals struct {
	client rest.Interface
	ns     string
}

// newCoherenceInternals returns a CoherenceInternals
func newCoherenceInternals(c *CoherenceV1Client, namespace string) *coherenceInternals {
	return &coherenceInternals{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the coherenceInternal, and returns the corresponding coherenceInternal object, and an error if there is any.
func (c *coherenceInternals) Get(name string, options metav1.GetOptions) (result *v1.CoherenceInternal, err error) {
	result = &v1.CoherenceInternal{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("coherenceinternals").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of CoherenceInternals that match those selectors.
func (c *coherenceInternals) List(opts metav1.ListOptions) (result *v1.CoherenceInternalList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.CoherenceInternalList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("coherenceinternals").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested coherenceInternals.
func (c *coherenceInternals) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("coherenceinternals").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a coherenceInternal and creates it.  Returns the server's representation of the coherenceInternal, and an error, if there is any.
func (c *coherenceInternals) Create(coherenceInternal *v1.CoherenceInternal) (result *v1.CoherenceInternal, err error) {
	result = &v1.CoherenceInternal{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("coherenceinternals").
		Body(coherenceInternal).
		Do().
		Into(result)
	return
}

// Update takes the representation of a coherenceInternal and updates it. Returns the server's representation of the coherenceInternal, and an error, if there is any.
func (c *coherenceInternals) Update(coherenceInternal *v1.CoherenceInternal) (result *v1.CoherenceInternal, err error) {
	result = &v1.CoherenceInternal{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("coherenceinternals").
		Name(coherenceInternal.Name).
		Body(coherenceInternal).
		Do().
		Into(result)
	return
}

// Delete takes name of the coherenceInternal and deletes it. Returns an error if one occurs.
func (c *coherenceInternals) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("coherenceinternals").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *coherenceInternals) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("coherenceinternals").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched coherenceInternal.
func (c *coherenceInternals) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.CoherenceInternal, err error) {
	result = &v1.CoherenceInternal{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("coherenceinternals").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
