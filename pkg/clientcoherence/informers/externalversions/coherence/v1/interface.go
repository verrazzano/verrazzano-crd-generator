// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	internalinterfaces "github.com/oracle/verrazzano-crd-generator/pkg/clientcoherence/informers/externalversions/internalinterfaces"
)

// Interface provides access to all the informers in this group version.
type Interface interface {
	// CoherenceClusters returns a CoherenceClusterInformer.
	CoherenceClusters() CoherenceClusterInformer
	// CoherenceInternals returns a CoherenceInternalInformer.
	CoherenceInternals() CoherenceInternalInformer
	// CoherenceRoles returns a CoherenceRoleInformer.
	CoherenceRoles() CoherenceRoleInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// CoherenceClusters returns a CoherenceClusterInformer.
func (v *version) CoherenceClusters() CoherenceClusterInformer {
	return &coherenceClusterInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// CoherenceInternals returns a CoherenceInternalInformer.
func (v *version) CoherenceInternals() CoherenceInternalInformer {
	return &coherenceInternalInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}

// CoherenceRoles returns a CoherenceRoleInformer.
func (v *version) CoherenceRoles() CoherenceRoleInformer {
	return &coherenceRoleInformer{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}
}
