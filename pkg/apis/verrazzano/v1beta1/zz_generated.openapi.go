// +build !ignore_autogenerated

// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1beta1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.BindingComponent":               schema_pkg_apis_verrazzano_v1beta1_BindingComponent(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.KubernetesNamespace":            schema_pkg_apis_verrazzano_v1beta1_KubernetesNamespace(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.MatchRequest":                   schema_pkg_apis_verrazzano_v1beta1_MatchRequest(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoBinding":              schema_pkg_apis_verrazzano_v1beta1_VerrazzanoBinding(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoBindingSpec":          schema_pkg_apis_verrazzano_v1beta1_VerrazzanoBindingSpec(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoBindingStatus":        schema_pkg_apis_verrazzano_v1beta1_VerrazzanoBindingStatus(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceBinding":     schema_pkg_apis_verrazzano_v1beta1_VerrazzanoCoherenceBinding(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceCluster":     schema_pkg_apis_verrazzano_v1beta1_VerrazzanoCoherenceCluster(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceConnection":  schema_pkg_apis_verrazzano_v1beta1_VerrazzanoCoherenceConnection(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoConnections":          schema_pkg_apis_verrazzano_v1beta1_VerrazzanoConnections(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoDatabaseBinding":      schema_pkg_apis_verrazzano_v1beta1_VerrazzanoDatabaseBinding(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoDatabaseConnection":   schema_pkg_apis_verrazzano_v1beta1_VerrazzanoDatabaseConnection(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoHelidon":              schema_pkg_apis_verrazzano_v1beta1_VerrazzanoHelidon(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoHelidonBinding":       schema_pkg_apis_verrazzano_v1beta1_VerrazzanoHelidonBinding(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoIngressBinding":       schema_pkg_apis_verrazzano_v1beta1_VerrazzanoIngressBinding(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoIngressConnection":    schema_pkg_apis_verrazzano_v1beta1_VerrazzanoIngressConnection(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoLogging":              schema_pkg_apis_verrazzano_v1beta1_VerrazzanoLogging(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoManagedCluster":       schema_pkg_apis_verrazzano_v1beta1_VerrazzanoManagedCluster(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoManagedClusterSpec":   schema_pkg_apis_verrazzano_v1beta1_VerrazzanoManagedClusterSpec(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoManagedClusterStatus": schema_pkg_apis_verrazzano_v1beta1_VerrazzanoManagedClusterStatus(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoMetrics":              schema_pkg_apis_verrazzano_v1beta1_VerrazzanoMetrics(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoModel":                schema_pkg_apis_verrazzano_v1beta1_VerrazzanoModel(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoModelSpec":            schema_pkg_apis_verrazzano_v1beta1_VerrazzanoModelSpec(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoModelStatus":          schema_pkg_apis_verrazzano_v1beta1_VerrazzanoModelStatus(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoPlacement":            schema_pkg_apis_verrazzano_v1beta1_VerrazzanoPlacement(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoRestConnection":       schema_pkg_apis_verrazzano_v1beta1_VerrazzanoRestConnection(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoWebLogicDomain":       schema_pkg_apis_verrazzano_v1beta1_VerrazzanoWebLogicDomain(ref),
		"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoWeblogicBinding":      schema_pkg_apis_verrazzano_v1beta1_VerrazzanoWeblogicBinding(ref),
	}
}

func schema_pkg_apis_verrazzano_v1beta1_BindingComponent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BindingComponent specifies a single component to bind to a namespace",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of a bound component",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_KubernetesNamespace(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubernetesNamespace defines a single Kubernetes namespace",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the namespace",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"components": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Names of components in the namespace",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.BindingComponent"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "components"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.BindingComponent"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_MatchRequest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MatchRequest specifies a http match rule",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"uri": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoBinding is the Schema for the Verrazzanobindings API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoBindingStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoBindingSpec", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoBindingStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoBindingSpec defines the desired state of VerrazzanoBinding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A description of the binding",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"modelName": {
						SchemaProps: spec.SchemaProps{
							Description: "The model name to associate the bindings",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"weblogicBindings": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of weblogic bindings",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoWeblogicBinding"),
									},
								},
							},
						},
					},
					"coherenceBindings": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of coherence bindings",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceBinding"),
									},
								},
							},
						},
					},
					"helidonBindings": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of helidon application bindings",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoHelidonBinding"),
									},
								},
							},
						},
					},
					"databaseBindings": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of database bindings",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoDatabaseBinding"),
									},
								},
							},
						},
					},
					"ingressBindings": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of ingress bindings",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoIngressBinding"),
									},
								},
							},
						},
					},
					"placement": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of Placement definitions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoPlacement"),
									},
								},
							},
						},
					},
				},
				Required: []string{"description", "modelName", "placement"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceBinding", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoDatabaseBinding", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoHelidonBinding", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoIngressBinding", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoPlacement", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoWeblogicBinding"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoBindingStatus defines the observed state of VerrazzanoBinding",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoCoherenceBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoCoherenceBinding defines a single Coherence binding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the binding",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of replicas to create This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoCoherenceCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoCoherenceCluster defines a single coherence cluster for the model",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the coherence cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The image:tag for the coherence user artifacts",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The docker secrets for pulling images",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"pofConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Coherence pof config",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cacheConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Coherence cache config",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"connections": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Connections configuration",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoConnections"),
									},
								},
							},
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics configuration",
							Ref:         ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoMetrics"),
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging configuration",
							Ref:         ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoLogging"),
						},
					},
				},
				Required: []string{"name", "image", "pofConfig", "cacheConfig"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoConnections", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoLogging", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoMetrics", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoCoherenceConnection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoCoherenceConnection defines a Coherence connection",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the target component",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "The coherence cluster services address",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"target", "address"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoConnections(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoConnections defines the connection for a component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"rest": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "REST Connections",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoRestConnection"),
									},
								},
							},
						},
					},
					"ingress": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Ingress Connections",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoIngressConnection"),
									},
								},
							},
						},
					},
					"database": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Database Connections",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoDatabaseConnection"),
									},
								},
							},
						},
					},
					"coherence": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Coherence Connections",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceConnection"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceConnection", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoDatabaseConnection", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoIngressConnection", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoRestConnection"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoDatabaseBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoDatabaseBinding defines a single database binding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the binding",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"credentials": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the secret containing the credentials",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "The database url connection string",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "credentials", "url"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoDatabaseConnection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoDatabaseConnection defines a Database conneciton",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the target component",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"datasourceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The JDBC data source name for the database",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"target", "datasourceName"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoHelidon(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoHelidon defines a single Helidon application for the model",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the Helidon application",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The docker image:tag that runs the application",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port to be used for the service port - defaults to 8080",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"targetPort": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetPort to be used for the service targetPort - defaults to 8080",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"imagePullSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The docker secrets for pulling images",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"fluentdEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Option to configure a Helidon application to use Fluentd for scraping the applications log. By default, Fluentd is enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"connections": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Connections configuration",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoConnections"),
									},
								},
							},
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics configuration",
							Ref:         ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoMetrics"),
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging configuration",
							Ref:         ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoLogging"),
						},
					},
				},
				Required: []string{"name", "image"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoConnections", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoLogging", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoMetrics", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoHelidonBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoHelidonBinding defines a single Helidon application binding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the binding",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of replicas to create This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoIngressBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoIngressBinding defines a single ingress binding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the binding",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dnsName": {
						SchemaProps: spec.SchemaProps{
							Description: "The DNS name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "dnsName"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoIngressConnection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoIngressConnection defines a Ingress connection",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the ingress",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"match": {
						SchemaProps: spec.SchemaProps{
							Description: "See  verrazzano-crd-generator/pkg/apis/networking.istio.io/v1alpha3/virtual_service.go\n    https://github.com/istio/api/blob/master/networking/v1alpha3/virtual_service.gen.json\n    (istio.io/api/networking/v1alpha3/virtual_service.json)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.MatchRequest"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.MatchRequest"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoLogging(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoLogging defines the logging configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of logging - one of: exporter, filebeat, TBD",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"indexPattern": {
						SchemaProps: spec.SchemaProps{
							Description: "The index-pattern to use (in elasticsearch)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "indexPattern"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoManagedCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoManagedCluster is the Schema for the Verrazzanomanagedclusters API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoManagedClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoManagedClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoManagedClusterSpec", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoManagedClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoManagedClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoManagedClusterSpec defines the desired state of VerrazzanoManagedCluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "The description of the managed cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "The server address",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of managed cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeconfigSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "The secret containing the KUBECONFIG for the managed cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"description", "serverAddress", "type", "kubeconfigSecret"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoManagedClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoManagedClusterStatus defines the observed state of VerrazzanoManagedCluster",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoMetrics(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoMetrics defines the metrics configuration for a component",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "The metrics endpoint (to be scraped)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the secret containing the credentials to access the metrics endpoint",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interval": {
						SchemaProps: spec.SchemaProps{
							Description: "The interval to scrape metrics",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"endpoint", "authSecret", "interval"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoModel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoModel is the Schema for the Verrazzanomodels API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoModelSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoModelStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoModelSpec", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoModelStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoModelSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoModelSpec defines the desired state of VerrazzanoModel",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "A description of the model",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"weblogicDomains": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of WebLogic domains",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoWebLogicDomain"),
									},
								},
							},
						},
					},
					"coherenceClusters": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of coherence clusters",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceCluster"),
									},
								},
							},
						},
					},
					"helidonApplications": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The set of Helidon applications",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoHelidon"),
									},
								},
							},
						},
					},
				},
				Required: []string{"description"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoCoherenceCluster", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoHelidon", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoWebLogicDomain"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoModelStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoModelStatus defines the observed state of VerrazzanoModel",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoPlacement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoPlacement defines a single placement definition",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the placement",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaces": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Namespaces for this placement",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.KubernetesNamespace"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "namespaces"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.KubernetesNamespace"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoRestConnection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoRestConnection defines a REST connection",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the target component",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"environmentVariableForHost": {
						SchemaProps: spec.SchemaProps{
							Description: "The dns name of the target component (its k8s service)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"environmentVariableForPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The port for the target component",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"target", "environmentVariableForHost", "environmentVariableForPort"},
			},
		},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoWebLogicDomain(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoWebLogicDomain defines a single Weblogic domain for the model",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The WebLogic domain name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"adminPort": {
						SchemaProps: spec.SchemaProps{
							Description: "External port number for admin console",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"t3Port": {
						SchemaProps: spec.SchemaProps{
							Description: "External port number for T3",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"fluentdEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Option to configure a Weblogic domain to use fluentd",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"domainCRValues": {
						SchemaProps: spec.SchemaProps{
							Description: "Domain CR values, can provide any valid Domain CR value",
							Ref:         ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/weblogic/v6.DomainSpec"),
						},
					},
					"connections": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Connections configuration",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoConnections"),
									},
								},
							},
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics configuration",
							Ref:         ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoMetrics"),
						},
					},
					"logging": {
						SchemaProps: spec.SchemaProps{
							Description: "Logging configuration",
							Ref:         ref("github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoLogging"),
						},
					},
				},
				Required: []string{"name", "domainCRValues"},
			},
		},
		Dependencies: []string{
			"github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoConnections", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoLogging", "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1.VerrazzanoMetrics", "github.com/oracle/verrazzano-crd-generator/pkg/apis/weblogic/v6.DomainSpec"},
	}
}

func schema_pkg_apis_verrazzano_v1beta1_VerrazzanoWeblogicBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VerrazzanoWeblogicBinding defines a single Weblogic domain binding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the binding",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of replicas to create This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}
