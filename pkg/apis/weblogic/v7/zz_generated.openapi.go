// +build !ignore_autogenerated

// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v7

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.AdminServer":     schema_pkg_apis_weblogic_v7_AdminServer(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.AdminService":    schema_pkg_apis_weblogic_v7_AdminService(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Channel":         schema_pkg_apis_weblogic_v7_Channel(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Cluster":         schema_pkg_apis_weblogic_v7_Cluster(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Configuration":   schema_pkg_apis_weblogic_v7_Configuration(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Domain":          schema_pkg_apis_weblogic_v7_Domain(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainCondition": schema_pkg_apis_weblogic_v7_DomainCondition(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainSpec":      schema_pkg_apis_weblogic_v7_DomainSpec(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainStatus":    schema_pkg_apis_weblogic_v7_DomainStatus(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Istio":           schema_pkg_apis_weblogic_v7_Istio(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ProbeTuning":     schema_pkg_apis_weblogic_v7_ProbeTuning(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerHealth":    schema_pkg_apis_weblogic_v7_ServerHealth(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerPod":       schema_pkg_apis_weblogic_v7_ServerPod(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerService":   schema_pkg_apis_weblogic_v7_ServerService(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerStatus":    schema_pkg_apis_weblogic_v7_ServerStatus(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.SubsystemHealth": schema_pkg_apis_weblogic_v7_SubsystemHealth(ref),
		"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.WebLogicSecret":  schema_pkg_apis_weblogic_v7_WebLogicSecret(ref),
	}
}

func schema_pkg_apis_weblogic_v7_AdminServer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AdminServer represents the operator configuration for the admin server",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serverPod": {
						SchemaProps: spec.SchemaProps{
							Description: "Server Pod",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerPod"),
						},
					},
					"serverService": {
						SchemaProps: spec.SchemaProps{
							Description: "Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerService"),
						},
					},
					"serverStartState": {
						SchemaProps: spec.SchemaProps{
							Description: "The state in which the server is to be started.  Legal values are \"RUNNING\" or \"ADMIN\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"restartVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "If present, every time this value is updated the operator will restart the required servers.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverStartPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The strategy for deciding whether to start a server. Legal values are ALWAYS, NEVER, or IF_NEEDED.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"adminService": {
						SchemaProps: spec.SchemaProps{
							Description: "Configures which of the admin server's WebLogic admin channels should be exposed outside the Kubernetes cluster via a node port service.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.AdminService"),
						},
					},
				},
				Required: []string{"adminService"},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.AdminService", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerPod", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerService"},
	}
}

func schema_pkg_apis_weblogic_v7_AdminService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"channels": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specifies which of the admin server's WebLogic channels should be exposed outside the Kubernetes cluster via a node port service, along with the node port for each channel. If not specified, the admin server's node port service will not be created.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Channel"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Channel"},
	}
}

func schema_pkg_apis_weblogic_v7_Channel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"channelName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of channel",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the port number used to access the WebLogic channel outside of the Kubernetes cluster",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"channelName"},
			},
		},
	}
}

func schema_pkg_apis_weblogic_v7_Cluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"serverPod": {
						SchemaProps: spec.SchemaProps{
							Description: "Server Pod",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerPod"),
						},
					},
					"serverService": {
						SchemaProps: spec.SchemaProps{
							Description: "Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerService"),
						},
					},
					"serverStartState": {
						SchemaProps: spec.SchemaProps{
							Description: "The state in which the server is to be started.  Legal values are \"RUNNING\" or \"ADMIN\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"restartVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "If present, every time this value is updated the operator will restart the required servers.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of this cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of managed servers to run in this cluster Note: this value is required by WebLogic Operator, but is marked optional because Verrazzano can provide a default value.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"serverStartPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The strategy for deciding whether to start a server. Legal values are NEVER, or IF_NEEDED.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of cluster members that can be temporarily unavailable. Defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"clusterService": {
						SchemaProps: spec.SchemaProps{
							Description: "Customization affecting ClusterIP Kubernetes services for the WebLogic cluster.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.KubernetesResource"),
						},
					},
				},
				Required: []string{"clusterName"},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.KubernetesResource", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerPod", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerService"},
	}
}

func schema_pkg_apis_weblogic_v7_Configuration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"istio": {
						SchemaProps: spec.SchemaProps{
							Description: "Istio service mesh integration configuration",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Istio"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Istio"},
	}
}

func schema_pkg_apis_weblogic_v7_Domain(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Domain is the Schema for the domains API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainSpec", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_weblogic_v7_DomainCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Current service state of domain",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"lastProbeTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time we probed the condition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human-readable message indicating details about last transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique, one-word, CamelCase reason for the condition's last transition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status is the status of the condition. Can be True, False, Unknown",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"domainConditionType": {
						SchemaProps: spec.SchemaProps{
							Description: "The type of the condition. Valid types are Progressing, Available, and Failed. Required",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"status", "domainConditionType"},
			},
		},
	}
}

func schema_pkg_apis_weblogic_v7_DomainSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DomainSpec defines the desired state of Domain",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serverPod": {
						SchemaProps: spec.SchemaProps{
							Description: "Server Pod",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerPod"),
						},
					},
					"serverService": {
						SchemaProps: spec.SchemaProps{
							Description: "Customization affecting ClusterIP Kubernetes services for WebLogic Server instances.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerService"),
						},
					},
					"serverStartState": {
						SchemaProps: spec.SchemaProps{
							Description: "The state in which the server is to be started.  Legal values are \"RUNNING\" or \"ADMIN\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"restartVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "If present, every time this value is updated the operator will restart the required servers.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"domainUID": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the WebLogic domain",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"domainHome": {
						SchemaProps: spec.SchemaProps{
							Description: "The folder for the WebLogic Domain",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverStartPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The strategy for deciding whether to start a server.  Legal values are ADMIN_ONLY, NEVER, or IF_NEEDED. Note: this value is required by WebLogic Operator, but is marked optional because Verrazzano can provide a default value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"webLogicCredentialsSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of a pre-created Kubernetes secret, in the domain's namepace, that holds the username and password needed to boot WebLogic Server",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.WebLogicSecret"),
						},
					},
					"logHome": {
						SchemaProps: spec.SchemaProps{
							Description: "The in-pod name of the directory in which to store the domain, node manager, server logs, and server *.out files",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logHomeEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Specified whether the log home folder is enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"includeServerOutInPodLog": {
						SchemaProps: spec.SchemaProps{
							Description: "If true (the default), the server .out file will be included in the pod's stdout.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The WebLogic Docker image; required when domainHomeInImage is true",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The image pull policy for the WebLogic Docker image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of image pull secrets for the WebLogic Docker image",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.WebLogicSecret"),
									},
								},
							},
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of managed servers to run in any cluster that does not specify a replica count. This is a pointer to distinguish between explicit zero and not specified. Note: this value is required by WebLogic Operator, but is marked optional because Verrazzano can provide a default value.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"domainHomeInImage": {
						SchemaProps: spec.SchemaProps{
							Description: "True if this domain's home is defined in the docker image for the domain Note: this value is required by WebLogic Operator, but is marked optional because Verrazzano can provide a default value.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"configOverrides": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the config map for optional WebLogic configuration overrides",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configOverrideSecrets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of names of the secrets for optional WebLogic configuration overrides",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"adminServer": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the admin server Note: this value is required by WebLogic Operator, but is marked optional because Verrazzano can provide a default value.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.AdminServer"),
						},
					},
					"managedServers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for individual Managed Servers",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ManagedServer"),
									},
								},
							},
						},
					},
					"clusters": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the clusters",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Cluster"),
									},
								},
							},
						},
					},
					"configuration": {
						SchemaProps: spec.SchemaProps{
							Description: "Configurations",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Configuration"),
						},
					},
				},
				Required: []string{"webLogicCredentialsSecret", "logHome", "image", "imagePullSecrets", "clusters"},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.AdminServer", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Cluster", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Configuration", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ManagedServer", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerPod", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerService", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.WebLogicSecret"},
	}
}

func schema_pkg_apis_weblogic_v7_DomainStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DomainStatus defines the observed state of Domain",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Current service state of domain",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainCondition"),
									},
								},
							},
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about why the domain is in this condition",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A brief CamelCase message indicating details about why the domain is in this state",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"servers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Status of WebLogic servers in this domain",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerStatus"),
									},
								},
							},
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "RFC 3339 date and time at which the operator started the domain. This will be when the operator begins processing and will precede when the various servers or clusters are available.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of running managed servers in the WebLogic cluster if there is only one cluster in the domain and where the cluster does not explicitly configure its replicas in a cluster specification.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.DomainCondition", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerStatus"},
	}
}

func schema_pkg_apis_weblogic_v7_Istio(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Istio service mesh integration configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "True, if this domain is deployed under an Istio service mesh.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"readinessPort": {
						SchemaProps: spec.SchemaProps{
							Description: "The WebLogic readiness port for Istio. Defaults to 8888.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_weblogic_v7_ProbeTuning(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"initialDelaySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of seconds before the first check is performed.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"periodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of seconds between checks.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of seconds with no response that indicates a failure.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_weblogic_v7_ServerHealth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServerHealth describes the current status and health of a specific WebLogic server.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"activationTime": {
						SchemaProps: spec.SchemaProps{
							Description: "RFC 3339 date and time at which the server started",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"overallHealth": {
						SchemaProps: spec.SchemaProps{
							Description: "Server health of this WebLogic server. If the value is \"Not available\", the operator has failed to read the health. If the value is \"Not available (possibly overloaded)\", the operator has failed to read the health of the server possibly due to the server is in overloaded state\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subsystems": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Status of unhealthy subsystems, if any",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.SubsystemHealth"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.SubsystemHealth"},
	}
}

func schema_pkg_apis_weblogic_v7_ServerPod(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of environment variables to add to a server",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings for the liveness probe associated with a server.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ProbeTuning"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Settings for the readiness probe associated with a server.",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ProbeTuning"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector which must match a node's labels for the pod to be scheduled on that node.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"initContainers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "InitContainers holds a list of initialization containers that should be run before starting the main containers in this pod.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"containers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Additional containers to be included in the server pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Container"),
									},
								},
							},
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readinessGates": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md\"",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PodReadinessGate"),
									},
								},
							},
						},
					},
					"restartPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runtimeClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"schedulerName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the ServiceAccount to be used to run this pod. If it is not set, default ServiceAccount will be used. The ServiceAccount has to exist at the time the pod is created.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Memory and CPU minimum requirements and limits for the server.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"podSecurityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod-level security attributes.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"shutdown": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Shutdown"),
						},
					},
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Additional volumes to be created in the server pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Additional volume mounts for the server pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ProbeTuning", "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.Shutdown", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Container", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PodReadinessGate", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_weblogic_v7_ServerService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The labels to be attached to generated resources. The label names must not start with 'weblogic.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "The annotations to be attached to generated resources.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"precreateService": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, operator will create server services even for server instances without running pods.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"precreateService"},
			},
		},
	}
}

func schema_pkg_apis_weblogic_v7_ServerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Status of WebLogic servers in this domain",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serverName": {
						SchemaProps: spec.SchemaProps{
							Description: "WebLogic server name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "Current state of this WebLogic server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "WebLogic cluster name, if the server is part of a cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of node that is hosting the Pod containing this WebLogic server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"health": {
						SchemaProps: spec.SchemaProps{
							Description: "Current status and health of a specific WebLogic server",
							Ref:         ref("github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerHealth"),
						},
					},
				},
				Required: []string{"serverName", "state", "health"},
			},
		},
		Dependencies: []string{
			"github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7.ServerHealth"},
	}
}

func schema_pkg_apis_weblogic_v7_SubsystemHealth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SubsystemHealth describes the current health of a specific subsystem.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"health": {
						SchemaProps: spec.SchemaProps{
							Description: "Server health of this WebLogic server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subsystemName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of subsystem providing symptom information",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"symptoms": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Symptoms provided by the reporting subsystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"health", "subsystemName"},
			},
		},
	}
}

func schema_pkg_apis_weblogic_v7_WebLogicSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WebLogicSecret identifies the secret that contains the WebLogic admin credentials",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}
