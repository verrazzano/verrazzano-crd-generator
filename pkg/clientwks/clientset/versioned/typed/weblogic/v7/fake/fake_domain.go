// Copyright (c) 2020, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v7 "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDomains implements DomainInterface
type FakeDomains struct {
	Fake *FakeWeblogicV7
	ns   string
}

var domainsResource = schema.GroupVersionResource{Group: "weblogic.oracle", Version: "v7", Resource: "domains"}

var domainsKind = schema.GroupVersionKind{Group: "weblogic.oracle", Version: "v7", Kind: "Domain"}

// Get takes name of the domain, and returns the corresponding domain object, and an error if there is any.
func (c *FakeDomains) Get(ctx context.Context, name string, options v1.GetOptions) (result *v7.Domain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(domainsResource, c.ns, name), &v7.Domain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v7.Domain), err
}

// List takes label and field selectors, and returns the list of Domains that match those selectors.
func (c *FakeDomains) List(ctx context.Context, opts v1.ListOptions) (result *v7.DomainList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(domainsResource, domainsKind, c.ns, opts), &v7.DomainList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v7.DomainList{ListMeta: obj.(*v7.DomainList).ListMeta}
	for _, item := range obj.(*v7.DomainList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested domains.
func (c *FakeDomains) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(domainsResource, c.ns, opts))

}

// Create takes the representation of a domain and creates it.  Returns the server's representation of the domain, and an error, if there is any.
func (c *FakeDomains) Create(ctx context.Context, domain *v7.Domain, opts v1.CreateOptions) (result *v7.Domain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(domainsResource, c.ns, domain), &v7.Domain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v7.Domain), err
}

// Update takes the representation of a domain and updates it. Returns the server's representation of the domain, and an error, if there is any.
func (c *FakeDomains) Update(ctx context.Context, domain *v7.Domain, opts v1.UpdateOptions) (result *v7.Domain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(domainsResource, c.ns, domain), &v7.Domain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v7.Domain), err
}

// Delete takes name of the domain and deletes it. Returns an error if one occurs.
func (c *FakeDomains) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(domainsResource, c.ns, name), &v7.Domain{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDomains) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(domainsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v7.DomainList{})
	return err
}

// Patch applies the patch and returns the patched domain.
func (c *FakeDomains) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v7.Domain, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(domainsResource, c.ns, name, pt, data, subresources...), &v7.Domain{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v7.Domain), err
}
