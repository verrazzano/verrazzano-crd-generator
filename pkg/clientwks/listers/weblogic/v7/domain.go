// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by lister-gen. DO NOT EDIT.

package v7

import (
	v7 "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/weblogic/v7"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainLister helps list Domains.
type DomainLister interface {
	// List lists all Domains in the indexer.
	List(selector labels.Selector) (ret []*v7.Domain, err error)
	// Domains returns an object that can list and get Domains.
	Domains(namespace string) DomainNamespaceLister
	DomainListerExpansion
}

// domainLister implements the DomainLister interface.
type domainLister struct {
	indexer cache.Indexer
}

// NewDomainLister returns a new DomainLister.
func NewDomainLister(indexer cache.Indexer) DomainLister {
	return &domainLister{indexer: indexer}
}

// List lists all Domains in the indexer.
func (s *domainLister) List(selector labels.Selector) (ret []*v7.Domain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v7.Domain))
	})
	return ret, err
}

// Domains returns an object that can list and get Domains.
func (s *domainLister) Domains(namespace string) DomainNamespaceLister {
	return domainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainNamespaceLister helps list and get Domains.
type DomainNamespaceLister interface {
	// List lists all Domains in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v7.Domain, err error)
	// Get retrieves the Domain from the indexer for a given namespace and name.
	Get(name string) (*v7.Domain, error)
	DomainNamespaceListerExpansion
}

// domainNamespaceLister implements the DomainNamespaceLister
// interface.
type domainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Domains in the indexer for a given namespace.
func (s domainNamespaceLister) List(selector labels.Selector) (ret []*v7.Domain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v7.Domain))
	})
	return ret, err
}

// Get retrieves the Domain from the indexer for a given namespace and name.
func (s domainNamespaceLister) Get(name string) (*v7.Domain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v7.Resource("domain"), name)
	}
	return obj.(*v7.Domain), nil
}
