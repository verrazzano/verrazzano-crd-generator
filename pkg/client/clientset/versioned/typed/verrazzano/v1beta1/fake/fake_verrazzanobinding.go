// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/oracle/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeVerrazzanoBindings implements VerrazzanoBindingInterface
type FakeVerrazzanoBindings struct {
	Fake *FakeVerrazzanoV1beta1
	ns   string
}

var verrazzanobindingsResource = schema.GroupVersionResource{Group: "verrazzano.io", Version: "v1beta1", Resource: "verrazzanobindings"}

var verrazzanobindingsKind = schema.GroupVersionKind{Group: "verrazzano.io", Version: "v1beta1", Kind: "VerrazzanoBinding"}

// Get takes name of the verrazzanoBinding, and returns the corresponding verrazzanoBinding object, and an error if there is any.
func (c *FakeVerrazzanoBindings) Get(name string, options v1.GetOptions) (result *v1beta1.VerrazzanoBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(verrazzanobindingsResource, c.ns, name), &v1beta1.VerrazzanoBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.VerrazzanoBinding), err
}

// List takes label and field selectors, and returns the list of VerrazzanoBindings that match those selectors.
func (c *FakeVerrazzanoBindings) List(opts v1.ListOptions) (result *v1beta1.VerrazzanoBindingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(verrazzanobindingsResource, verrazzanobindingsKind, c.ns, opts), &v1beta1.VerrazzanoBindingList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.VerrazzanoBindingList{ListMeta: obj.(*v1beta1.VerrazzanoBindingList).ListMeta}
	for _, item := range obj.(*v1beta1.VerrazzanoBindingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested verrazzanoBindings.
func (c *FakeVerrazzanoBindings) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(verrazzanobindingsResource, c.ns, opts))

}

// Create takes the representation of a verrazzanoBinding and creates it.  Returns the server's representation of the verrazzanoBinding, and an error, if there is any.
func (c *FakeVerrazzanoBindings) Create(verrazzanoBinding *v1beta1.VerrazzanoBinding) (result *v1beta1.VerrazzanoBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(verrazzanobindingsResource, c.ns, verrazzanoBinding), &v1beta1.VerrazzanoBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.VerrazzanoBinding), err
}

// Update takes the representation of a verrazzanoBinding and updates it. Returns the server's representation of the verrazzanoBinding, and an error, if there is any.
func (c *FakeVerrazzanoBindings) Update(verrazzanoBinding *v1beta1.VerrazzanoBinding) (result *v1beta1.VerrazzanoBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(verrazzanobindingsResource, c.ns, verrazzanoBinding), &v1beta1.VerrazzanoBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.VerrazzanoBinding), err
}

// Delete takes name of the verrazzanoBinding and deletes it. Returns an error if one occurs.
func (c *FakeVerrazzanoBindings) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(verrazzanobindingsResource, c.ns, name), &v1beta1.VerrazzanoBinding{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeVerrazzanoBindings) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(verrazzanobindingsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1beta1.VerrazzanoBindingList{})
	return err
}

// Patch applies the patch and returns the patched verrazzanoBinding.
func (c *FakeVerrazzanoBindings) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.VerrazzanoBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(verrazzanobindingsResource, c.ns, name, pt, data, subresources...), &v1beta1.VerrazzanoBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.VerrazzanoBinding), err
}
