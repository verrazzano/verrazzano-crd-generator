// Copyright (c) 2020, Oracle Corporation and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/verrazzano/verrazzano-crd-generator/pkg/apis/verrazzano/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VerrazzanoModelLister helps list VerrazzanoModels.
type VerrazzanoModelLister interface {
	// List lists all VerrazzanoModels in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.VerrazzanoModel, err error)
	// VerrazzanoModels returns an object that can list and get VerrazzanoModels.
	VerrazzanoModels(namespace string) VerrazzanoModelNamespaceLister
	VerrazzanoModelListerExpansion
}

// verrazzanoModelLister implements the VerrazzanoModelLister interface.
type verrazzanoModelLister struct {
	indexer cache.Indexer
}

// NewVerrazzanoModelLister returns a new VerrazzanoModelLister.
func NewVerrazzanoModelLister(indexer cache.Indexer) VerrazzanoModelLister {
	return &verrazzanoModelLister{indexer: indexer}
}

// List lists all VerrazzanoModels in the indexer.
func (s *verrazzanoModelLister) List(selector labels.Selector) (ret []*v1beta1.VerrazzanoModel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VerrazzanoModel))
	})
	return ret, err
}

// VerrazzanoModels returns an object that can list and get VerrazzanoModels.
func (s *verrazzanoModelLister) VerrazzanoModels(namespace string) VerrazzanoModelNamespaceLister {
	return verrazzanoModelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VerrazzanoModelNamespaceLister helps list and get VerrazzanoModels.
type VerrazzanoModelNamespaceLister interface {
	// List lists all VerrazzanoModels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.VerrazzanoModel, err error)
	// Get retrieves the VerrazzanoModel from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.VerrazzanoModel, error)
	VerrazzanoModelNamespaceListerExpansion
}

// verrazzanoModelNamespaceLister implements the VerrazzanoModelNamespaceLister
// interface.
type verrazzanoModelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VerrazzanoModels in the indexer for a given namespace.
func (s verrazzanoModelNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.VerrazzanoModel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VerrazzanoModel))
	})
	return ret, err
}

// Get retrieves the VerrazzanoModel from the indexer for a given namespace and name.
func (s verrazzanoModelNamespaceLister) Get(name string) (*v1beta1.VerrazzanoModel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("verrazzanomodel"), name)
	}
	return obj.(*v1beta1.VerrazzanoModel), nil
}
